(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
class Table {
    constructor(tableElem, headersTitle, apiURL) {
        this.wrapper = tableElem;
        this.header = tableElem.tHead;
        this.headersTitle = headersTitle;
        this.apiURL = apiURL;
    }
    renderHeader() {
        this.header = document.createElement("thead");
        this.header.classList.add("table__head");
        this.wrapper.append(this.header);
        let HTML = "<tr>";
        this.headersTitle.forEach(item => {
            HTML += `
                <th class="table__th" data-sortkey="${item["sortKey"]}">${item["name"]}</th>
            `;
        });
        HTML += "</tr>";
        this.header.insertAdjacentHTML('beforeend', HTML);
        this.header.firstElementChild.addEventListener("click", (e) => {
            this.handlerCellsHeaderClick(e);
        });
    }
    renderBody() {
        this.body = document.createElement("tbody");
        this.body.classList.add("table__body");
        this.wrapper.append(this.body);
    }
    renderFooter() {
        const HTML = `
            <tfoot class="table__foot">
                <tr class="table__preloader">
                    <td colspan="${this.headersTitle.length}">
                        <span class="spinner"></span>
                    </td>
                </tr>
                <tr>
                    <td colspan=${this.headersTitle.length}">
                        <button type="button" class="button button__hide" id="prev-button">Назад</button>
                        <button type="button" class="button button__hide" id="next-button">Вперед</button>
                    </td>
                </tr>
            </tfoot>
        `;
        this.wrapper.insertAdjacentHTML('beforeend', HTML);
        this.nextButton = document.getElementById("next-button");
        this.prevButton = document.getElementById("prev-button");
        this.preloader = document.querySelector(".table__preloader");
        this.nextButton.addEventListener("click", (e) => {
            this.handlerButtonClick(e);
        });
        this.prevButton.addEventListener("click", (e) => {
            this.handlerButtonClick(e);
        });
    }
    startRender() {
        this.renderHeader();
        this.renderBody();
        this.renderFooter();
        this.getResponseOfJson(this.apiURL)
            .then((data) => {
            this.setLinkButtonsAndRenderTableBody(data);
        })
            .catch(console.log)
            .finally(() => {
            this.preloader.classList.add("table__preloader_hide");
        });
    }
    handlerButtonClick(e) {
        this.body.innerHTML = "";
        this.preloader.classList.remove("table__preloader_hide");
        this.getResponseOfJson(e.target.dataset.link)
            .then((data) => {
            this.setLinkButtonsAndRenderTableBody(data);
        })
            .catch(console.log)
            .finally(() => {
            this.preloader.classList.add("table__preloader_hide");
        });
    }
    handlerCellsHeaderClick(e) {
        const cellTable = e.target;
        if (cellTable.tagName === "TH") {
            const sortKey = cellTable.dataset.sortkey;
            if (sortKey !== "") {
                this.renderArrowCellSort(cellTable);
                let sortTableData = cellTable.classList.contains("table__th_sort_down") ?
                    this.sortArray(this.apiData["results"], sortKey, "DESC") :
                    this.sortArray(this.apiData["results"], sortKey, "ASC");
                this.renderBodyRows(sortTableData);
            }
        }
    }
    sortArray(tableData, sortKey, order = "ASC") {
        let strings = [], numbers = [];
        Array.from(tableData).forEach(item => {
            !isNaN(+item[sortKey]) ? numbers.push(item) : strings.push(item);
        });
        if (order === "DESC") {
            if (strings.length > 1) {
                strings.sort((rowA, rowB) => rowA[sortKey] > rowB[sortKey] ? 1 : -1);
            }
            if (numbers.length > 1) {
                numbers.sort((rowA, rowB) => +rowA[sortKey] > +rowB[sortKey] ? 1 : -1);
            }
            return numbers.concat(strings);
        }
        if (order === "ASC") {
            if (strings.length > 1) {
                strings.sort((rowA, rowB) => rowA[sortKey] < rowB[sortKey] ? 1 : -1);
            }
            if (numbers.length > 1) {
                numbers.sort((rowA, rowB) => +rowA[sortKey] < +rowB[sortKey] ? 1 : -1);
            }
            return strings.concat(numbers);
        }
    }
    renderArrowCellSort(cellTable) {
        if (!cellTable.classList.contains("table__th_sort_up") && !cellTable.classList.contains("table__th_sort_down")) {
            document.querySelectorAll(".table__th").forEach(element => {
                element.classList.remove("table__th_sort_up");
                element.classList.remove("table__th_sort_down");
            });
            cellTable.classList.add("table__th_sort_down");
        }
        else if (cellTable.classList.contains("table__th_sort_down")) {
            cellTable.classList.remove("table__th_sort_down");
            cellTable.classList.add("table__th_sort_up");
        }
        else if (cellTable.classList.contains("table__th_sort_up")) {
            cellTable.classList.remove("table__th_sort_up");
            cellTable.classList.add("table__th_sort_down");
        }
    }
    renderBodyRows(tableData) {
        this.body.innerHTML = "";
        let tableRowHTML;
        tableData.forEach(item => {
            tableRowHTML = `
                <tr>
                    <td>${item["name"]}</td>
                    <td>${item["height"]}</td>
                    <td>${item["mass"]}</td>
                    <td>${item["gender"]}</td>
                </tr>
            `;
            this.body.insertAdjacentHTML("beforeend", tableRowHTML);
        });
    }
    async getResponseOfJson(apiUrl) {
        const response = await fetch(apiUrl);
        if (response.ok) {
            return response.json();
        }
        else {
            throw new Error(`Ошибка с кодом ${response.status}: ${response.statusText}`);
        }
    }
    setLinkButtonsAndRenderTableBody(apiData) {
        this.apiData = JSON.parse(JSON.stringify(apiData));
        this.buttonsDisplay(apiData);
        this.renderBodyRows(apiData["results"]);
    }
    buttonsDisplay(apiData) {
        if (apiData["next"] == null) {
            this.nextButton.classList.add("button__hide");
        }
        else {
            this.nextButton.classList.remove("button__hide");
            this.nextButton.dataset.link = apiData["next"];
        }
        if (apiData["previous"] == null) {
            this.prevButton.classList.add("button__hide");
        }
        else {
            this.prevButton.classList.remove("button__hide");
            this.prevButton.dataset.link = apiData["previous"];
        }
        document.querySelectorAll(".table__th").forEach(element => {
            element.classList.remove("table__th_sort_up");
            element.classList.remove("table__th_sort_down");
        });
    }
}
exports.Table = Table;
Object.defineProperty(this, "age", {});
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiUrl = void 0;
const apiUrl = "https://swapi.dev/api/people/";
exports.apiUrl = apiUrl;
},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("./constants/api");
const Table_1 = require("./components/Table");
const tableElem = document.querySelector(".table");
let tableClass = new Table_1.Table(tableElem, [
    { name: "Имя", sortKey: "name" },
    { name: "Рост", sortKey: "height" },
    { name: "Вес", sortKey: "mass" },
    { name: "Пол", sortKey: "gender" },
], api_1.apiUrl);
tableClass.startRender();
},{"./components/Table":1,"./constants/api":2}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvY29tcG9uZW50cy9UYWJsZS50cyIsInNyYy9jb25zdGFudHMvYXBpLnRzIiwic3JjL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUNtQkEsTUFBTSxLQUFLO0lBV1AsWUFBWSxTQUEyQixFQUFFLFlBQTZCLEVBQUUsTUFBYztRQUNsRixJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQztJQUVPLFlBQVk7UUFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFakMsSUFBSSxJQUFJLEdBQVcsTUFBTSxDQUFDO1FBQzFCLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzdCLElBQUksSUFBSTtzREFDa0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUM7YUFDekUsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxJQUFJLE9BQU8sQ0FBQztRQUNoQixJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVsRCxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQzFELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyxVQUFVO1FBQ2QsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVPLFlBQVk7UUFDaEIsTUFBTSxJQUFJLEdBQVc7OzttQ0FHTSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU07Ozs7O2tDQUt6QixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU07Ozs7OztTQU1qRCxDQUFDO1FBQ0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFbkQsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUU3RCxJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQzVDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUM5QixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDNUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQzthQUM5QixJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNYLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMvQyxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQzthQUNsQixPQUFPLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDMUQsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRU8sa0JBQWtCLENBQUMsQ0FBUTtRQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLGlCQUFpQixDQUFFLENBQUMsQ0FBQyxNQUFzQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7YUFDekQsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDWCxJQUFJLENBQUMsZ0NBQWdDLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDL0MsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7YUFDbEIsT0FBTyxDQUFDLEdBQUcsRUFBRTtZQUNWLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQzFELENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVPLHVCQUF1QixDQUFDLENBQVE7UUFDcEMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFDLE1BQXFCLENBQUM7UUFDMUMsSUFBSSxTQUFTLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtZQUM1QixNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLE9BQTBCLENBQUM7WUFDN0QsSUFBSSxPQUFPLEtBQUssRUFBRSxFQUFFO2dCQUNoQixJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3BDLElBQUksYUFBYSxHQUFlLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztvQkFDakYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUMxRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUU1RCxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ3RDO1NBQ0o7SUFDTCxDQUFDO0lBRU8sU0FBUyxDQUFDLFNBQXFCLEVBQUUsT0FBd0IsRUFBRSxRQUFnQixLQUFLO1FBQ3BGLElBQUksT0FBTyxHQUFlLEVBQUUsRUFBRSxPQUFPLEdBQWUsRUFBRSxDQUFDO1FBRXZELEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2pDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckUsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLEtBQUssS0FBSyxNQUFNLEVBQUU7WUFDbEIsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDcEIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN4RTtZQUVELElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ3BCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzFFO1lBRUQsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2xDO1FBRUQsSUFBSSxLQUFLLEtBQUssS0FBSyxFQUFFO1lBQ2pCLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ3BCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDeEU7WUFFRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNwQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMxRTtZQUVELE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNsQztJQUNMLENBQUM7SUFHTyxtQkFBbUIsQ0FBQyxTQUFzQjtRQUM5QyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLEVBQUU7WUFDNUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDdEQsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztnQkFDOUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUNwRCxDQUFDLENBQUMsQ0FBQztZQUNILFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDbEQ7YUFBTSxJQUFJLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLEVBQUU7WUFDNUQsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUNsRCxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ2hEO2FBQU0sSUFBSSxTQUFTLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO1lBQzFELFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDaEQsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztTQUNsRDtJQUNMLENBQUM7SUFFTyxjQUFjLENBQUMsU0FBcUI7UUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3pCLElBQUksWUFBb0IsQ0FBQztRQUN6QixTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3JCLFlBQVksR0FBRzs7MEJBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQzswQkFDWixJQUFJLENBQUMsUUFBUSxDQUFDOzBCQUNkLElBQUksQ0FBQyxNQUFNLENBQUM7MEJBQ1osSUFBSSxDQUFDLFFBQVEsQ0FBQzs7YUFFM0IsQ0FBQztZQUVGLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzVELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUFjO1FBQzFDLE1BQU0sUUFBUSxHQUFhLE1BQU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLElBQUksUUFBUSxDQUFDLEVBQUUsRUFBRTtZQUNiLE9BQU8sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQzFCO2FBQU07WUFDSCxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixRQUFRLENBQUMsTUFBTSxLQUFLLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFBO1NBQy9FO0lBQ0wsQ0FBQztJQUVPLGdDQUFnQyxDQUFDLE9BQWlCO1FBQ3RELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTyxjQUFjLENBQUMsT0FBaUI7UUFDcEMsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUNqRDthQUFNO1lBQ0gsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ2pELElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbEQ7UUFFRCxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLEVBQUU7WUFDN0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQ2pEO2FBQU07WUFDSCxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDakQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN0RDtRQUVELFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDdEQsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUM5QyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3BELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBRU8sc0JBQUs7QUFFYixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFFbEMsQ0FBQyxDQUFBOzs7OztBQ2xQRixNQUFNLE1BQU0sR0FBVywrQkFBK0IsQ0FBQztBQUMvQyx3QkFBTTs7OztBQ0RkLHlDQUF1QztBQUN2Qyw4Q0FBeUM7QUFFekMsTUFBTSxTQUFTLEdBQXFCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFHckUsSUFBSSxVQUFVLEdBQVUsSUFBSSxhQUFLLENBQUMsU0FBUyxFQUFFO0lBQ3pDLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFDO0lBQzlCLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFDO0lBQ2pDLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFDO0lBQzlCLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFDO0NBQ25DLEVBQUUsWUFBTSxDQUFDLENBQUM7QUFFWCxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJ0eXBlIFRIZWFkZXJzVGl0bGUgPSB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBzb3J0S2V5OiBzdHJpbmc7XHJcbn07XHJcblxyXG50eXBlIFRSb3dEYXRhID0ge1xyXG4gICAgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyO1xyXG59O1xyXG5cclxudHlwZSBUQXBpRGF0YSA9IHtcclxuICAgIG5leHQ6IHN0cmluZyB8IG51bGw7XHJcbiAgICBwcmV2aW91czogc3RyaW5nIHwgbnVsbDtcclxuICAgIHJlc3VsdHM6IFRSb3dEYXRhW107XHJcbn07XHJcblxyXG5pbnRlcmZhY2UgSVRhYmxlIHtcclxuICAgIHN0YXJ0UmVuZGVyKCk6IHZvaWQ7XHJcbn1cclxuXHJcbmNsYXNzIFRhYmxlIGltcGxlbWVudHMgSVRhYmxlIHtcclxuICAgIHByaXZhdGUgYm9keTogSFRNTEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIGhlYWRlcjogSFRNTEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIHdyYXBwZXI6IEhUTUxUYWJsZUVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIG5leHRCdXR0b246IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBwcmV2QnV0dG9uOiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgaGVhZGVyc1RpdGxlOiBUSGVhZGVyc1RpdGxlW107XHJcbiAgICBwcml2YXRlIHByZWxvYWRlcjogSFRNTEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIGFwaURhdGE6IFRBcGlEYXRhO1xyXG4gICAgcHJpdmF0ZSBhcGlVUkw6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZUVsZW06IEhUTUxUYWJsZUVsZW1lbnQsIGhlYWRlcnNUaXRsZTogVEhlYWRlcnNUaXRsZVtdLCBhcGlVUkw6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMud3JhcHBlciA9IHRhYmxlRWxlbTtcclxuICAgICAgICB0aGlzLmhlYWRlciA9IHRhYmxlRWxlbS50SGVhZDtcclxuICAgICAgICB0aGlzLmhlYWRlcnNUaXRsZSA9IGhlYWRlcnNUaXRsZTtcclxuICAgICAgICB0aGlzLmFwaVVSTCA9IGFwaVVSTDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbmRlckhlYWRlcigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aGVhZFwiKTtcclxuICAgICAgICB0aGlzLmhlYWRlci5jbGFzc0xpc3QuYWRkKFwidGFibGVfX2hlYWRcIik7XHJcbiAgICAgICAgdGhpcy53cmFwcGVyLmFwcGVuZCh0aGlzLmhlYWRlcik7XHJcblxyXG4gICAgICAgIGxldCBIVE1MOiBzdHJpbmcgPSBcIjx0cj5cIjtcclxuICAgICAgICB0aGlzLmhlYWRlcnNUaXRsZS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBIVE1MICs9IGBcclxuICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cInRhYmxlX190aFwiIGRhdGEtc29ydGtleT1cIiR7aXRlbVtcInNvcnRLZXlcIl19XCI+JHtpdGVtW1wibmFtZVwiXX08L3RoPlxyXG4gICAgICAgICAgICBgO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBIVE1MICs9IFwiPC90cj5cIjtcclxuICAgICAgICB0aGlzLmhlYWRlci5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIEhUTUwpO1xyXG5cclxuICAgICAgICB0aGlzLmhlYWRlci5maXJzdEVsZW1lbnRDaGlsZC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVyQ2VsbHNIZWFkZXJDbGljayhlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbmRlckJvZHkoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5ib2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRib2R5XCIpO1xyXG4gICAgICAgIHRoaXMuYm9keS5jbGFzc0xpc3QuYWRkKFwidGFibGVfX2JvZHlcIik7XHJcbiAgICAgICAgdGhpcy53cmFwcGVyLmFwcGVuZCh0aGlzLmJvZHkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVuZGVyRm9vdGVyKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IEhUTUw6IHN0cmluZyA9IGBcclxuICAgICAgICAgICAgPHRmb290IGNsYXNzPVwidGFibGVfX2Zvb3RcIj5cclxuICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cInRhYmxlX19wcmVsb2FkZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj1cIiR7dGhpcy5oZWFkZXJzVGl0bGUubGVuZ3RofVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNwaW5uZXJcIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49JHt0aGlzLmhlYWRlcnNUaXRsZS5sZW5ndGh9XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnV0dG9uIGJ1dHRvbl9faGlkZVwiIGlkPVwicHJldi1idXR0b25cIj7QndCw0LfQsNC0PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnV0dG9uIGJ1dHRvbl9faGlkZVwiIGlkPVwibmV4dC1idXR0b25cIj7QktC/0LXRgNC10LQ8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgPC90Zm9vdD5cclxuICAgICAgICBgO1xyXG4gICAgICAgIHRoaXMud3JhcHBlci5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIEhUTUwpO1xyXG5cclxuICAgICAgICB0aGlzLm5leHRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5leHQtYnV0dG9uXCIpO1xyXG4gICAgICAgIHRoaXMucHJldkJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJldi1idXR0b25cIik7XHJcbiAgICAgICAgdGhpcy5wcmVsb2FkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhYmxlX19wcmVsb2FkZXJcIik7XHJcblxyXG4gICAgICAgIHRoaXMubmV4dEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVyQnV0dG9uQ2xpY2soZSlcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnByZXZCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlckJ1dHRvbkNsaWNrKGUpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXJ0UmVuZGVyKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucmVuZGVySGVhZGVyKCk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJCb2R5KCk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJGb290ZXIoKTtcclxuICAgICAgICB0aGlzLmdldFJlc3BvbnNlT2ZKc29uKHRoaXMuYXBpVVJMKVxyXG4gICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRMaW5rQnV0dG9uc0FuZFJlbmRlclRhYmxlQm9keShkYXRhKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goY29uc29sZS5sb2cpXHJcbiAgICAgICAgICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJlbG9hZGVyLmNsYXNzTGlzdC5hZGQoXCJ0YWJsZV9fcHJlbG9hZGVyX2hpZGVcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGFuZGxlckJ1dHRvbkNsaWNrKGU6IEV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5ib2R5LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5wcmVsb2FkZXIuY2xhc3NMaXN0LnJlbW92ZShcInRhYmxlX19wcmVsb2FkZXJfaGlkZVwiKTtcclxuICAgICAgICB0aGlzLmdldFJlc3BvbnNlT2ZKc29uKChlLnRhcmdldCBhcyBIVE1MRWxlbWVudCkuZGF0YXNldC5saW5rKVxyXG4gICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRMaW5rQnV0dG9uc0FuZFJlbmRlclRhYmxlQm9keShkYXRhKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goY29uc29sZS5sb2cpXHJcbiAgICAgICAgICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJlbG9hZGVyLmNsYXNzTGlzdC5hZGQoXCJ0YWJsZV9fcHJlbG9hZGVyX2hpZGVcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGFuZGxlckNlbGxzSGVhZGVyQ2xpY2soZTogRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBjZWxsVGFibGUgPSBlLnRhcmdldCBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICBpZiAoY2VsbFRhYmxlLnRhZ05hbWUgPT09IFwiVEhcIikge1xyXG4gICAgICAgICAgICBjb25zdCBzb3J0S2V5ID0gY2VsbFRhYmxlLmRhdGFzZXQuc29ydGtleSBhcyBzdHJpbmcgfCBudW1iZXI7XHJcbiAgICAgICAgICAgIGlmIChzb3J0S2V5ICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckFycm93Q2VsbFNvcnQoY2VsbFRhYmxlKTtcclxuICAgICAgICAgICAgICAgIGxldCBzb3J0VGFibGVEYXRhOiBUUm93RGF0YVtdID0gY2VsbFRhYmxlLmNsYXNzTGlzdC5jb250YWlucyhcInRhYmxlX190aF9zb3J0X2Rvd25cIikgP1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc29ydEFycmF5KHRoaXMuYXBpRGF0YVtcInJlc3VsdHNcIl0sIHNvcnRLZXksIFwiREVTQ1wiKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3J0QXJyYXkodGhpcy5hcGlEYXRhW1wicmVzdWx0c1wiXSwgc29ydEtleSwgXCJBU0NcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJCb2R5Um93cyhzb3J0VGFibGVEYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNvcnRBcnJheSh0YWJsZURhdGE6IFRSb3dEYXRhW10sIHNvcnRLZXk6IHN0cmluZyB8IG51bWJlciwgb3JkZXI6IHN0cmluZyA9IFwiQVNDXCIpOiBUUm93RGF0YVtdIHtcclxuICAgICAgICBsZXQgc3RyaW5nczogVFJvd0RhdGFbXSA9IFtdLCBudW1iZXJzOiBUUm93RGF0YVtdID0gW107XHJcblxyXG4gICAgICAgIEFycmF5LmZyb20odGFibGVEYXRhKS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAhaXNOYU4oK2l0ZW1bc29ydEtleV0pID8gbnVtYmVycy5wdXNoKGl0ZW0pIDogc3RyaW5ncy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAob3JkZXIgPT09IFwiREVTQ1wiKSB7XHJcbiAgICAgICAgICAgIGlmIChzdHJpbmdzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHN0cmluZ3Muc29ydCgocm93QSwgcm93QikgPT4gcm93QVtzb3J0S2V5XSA+IHJvd0Jbc29ydEtleV0gPyAxIDogLTEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobnVtYmVycy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBudW1iZXJzLnNvcnQoKHJvd0EsIHJvd0IpID0+ICtyb3dBW3NvcnRLZXldID4gK3Jvd0Jbc29ydEtleV0gPyAxIDogLTEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVycy5jb25jYXQoc3RyaW5ncyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3JkZXIgPT09IFwiQVNDXCIpIHtcclxuICAgICAgICAgICAgaWYgKHN0cmluZ3MubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgc3RyaW5ncy5zb3J0KChyb3dBLCByb3dCKSA9PiByb3dBW3NvcnRLZXldIDwgcm93Qltzb3J0S2V5XSA/IDEgOiAtMSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChudW1iZXJzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIG51bWJlcnMuc29ydCgocm93QSwgcm93QikgPT4gK3Jvd0Fbc29ydEtleV0gPCArcm93Qltzb3J0S2V5XSA/IDEgOiAtMSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdzLmNvbmNhdChudW1iZXJzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgcmVuZGVyQXJyb3dDZWxsU29ydChjZWxsVGFibGU6IEhUTUxFbGVtZW50KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFjZWxsVGFibGUuY2xhc3NMaXN0LmNvbnRhaW5zKFwidGFibGVfX3RoX3NvcnRfdXBcIikgJiYgIWNlbGxUYWJsZS5jbGFzc0xpc3QuY29udGFpbnMoXCJ0YWJsZV9fdGhfc29ydF9kb3duXCIpKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFibGVfX3RoXCIpLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJsZV9fdGhfc29ydF91cFwiKTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhYmxlX190aF9zb3J0X2Rvd25cIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjZWxsVGFibGUuY2xhc3NMaXN0LmFkZChcInRhYmxlX190aF9zb3J0X2Rvd25cIik7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjZWxsVGFibGUuY2xhc3NMaXN0LmNvbnRhaW5zKFwidGFibGVfX3RoX3NvcnRfZG93blwiKSkge1xyXG4gICAgICAgICAgICBjZWxsVGFibGUuY2xhc3NMaXN0LnJlbW92ZShcInRhYmxlX190aF9zb3J0X2Rvd25cIik7XHJcbiAgICAgICAgICAgIGNlbGxUYWJsZS5jbGFzc0xpc3QuYWRkKFwidGFibGVfX3RoX3NvcnRfdXBcIik7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjZWxsVGFibGUuY2xhc3NMaXN0LmNvbnRhaW5zKFwidGFibGVfX3RoX3NvcnRfdXBcIikpIHtcclxuICAgICAgICAgICAgY2VsbFRhYmxlLmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJsZV9fdGhfc29ydF91cFwiKTtcclxuICAgICAgICAgICAgY2VsbFRhYmxlLmNsYXNzTGlzdC5hZGQoXCJ0YWJsZV9fdGhfc29ydF9kb3duXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbmRlckJvZHlSb3dzKHRhYmxlRGF0YTogVFJvd0RhdGFbXSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYm9keS5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgIGxldCB0YWJsZVJvd0hUTUw6IHN0cmluZztcclxuICAgICAgICB0YWJsZURhdGEuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgdGFibGVSb3dIVE1MID0gYFxyXG4gICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZD4ke2l0ZW1bXCJuYW1lXCJdfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPiR7aXRlbVtcImhlaWdodFwiXX08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZD4ke2l0ZW1bXCJtYXNzXCJdfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPiR7aXRlbVtcImdlbmRlclwiXX08L3RkPlxyXG4gICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgYDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYm9keS5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIiwgdGFibGVSb3dIVE1MKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGdldFJlc3BvbnNlT2ZKc29uKGFwaVVybDogc3RyaW5nKTogUHJvbWlzZTxUQXBpRGF0YT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlOiBSZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVVybCk7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDQntGI0LjQsdC60LAg0YEg0LrQvtC00L7QvCAke3Jlc3BvbnNlLnN0YXR1c306ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldExpbmtCdXR0b25zQW5kUmVuZGVyVGFibGVCb2R5KGFwaURhdGE6IFRBcGlEYXRhKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5hcGlEYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhcGlEYXRhKSk7XHJcbiAgICAgICAgdGhpcy5idXR0b25zRGlzcGxheShhcGlEYXRhKTtcclxuICAgICAgICB0aGlzLnJlbmRlckJvZHlSb3dzKGFwaURhdGFbXCJyZXN1bHRzXCJdKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGJ1dHRvbnNEaXNwbGF5KGFwaURhdGE6IFRBcGlEYXRhKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGFwaURhdGFbXCJuZXh0XCJdID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5uZXh0QnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJidXR0b25fX2hpZGVcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5uZXh0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJidXR0b25fX2hpZGVcIik7XHJcbiAgICAgICAgICAgIHRoaXMubmV4dEJ1dHRvbi5kYXRhc2V0LmxpbmsgPSBhcGlEYXRhW1wibmV4dFwiXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhcGlEYXRhW1wicHJldmlvdXNcIl0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnByZXZCdXR0b24uY2xhc3NMaXN0LmFkZChcImJ1dHRvbl9faGlkZVwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnByZXZCdXR0b24uY2xhc3NMaXN0LnJlbW92ZShcImJ1dHRvbl9faGlkZVwiKTtcclxuICAgICAgICAgICAgdGhpcy5wcmV2QnV0dG9uLmRhdGFzZXQubGluayA9IGFwaURhdGFbXCJwcmV2aW91c1wiXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFibGVfX3RoXCIpLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhYmxlX190aF9zb3J0X3VwXCIpO1xyXG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJsZV9fdGhfc29ydF9kb3duXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge1RhYmxlfTtcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFnZVwiLCB7XHJcblxyXG59KSIsImNvbnN0IGFwaVVybDogc3RyaW5nID0gXCJodHRwczovL3N3YXBpLmRldi9hcGkvcGVvcGxlL1wiO1xyXG5leHBvcnQge2FwaVVybH07IiwiaW1wb3J0IHthcGlVcmx9IGZyb20gXCIuL2NvbnN0YW50cy9hcGlcIjtcclxuaW1wb3J0IHtUYWJsZX0gZnJvbSBcIi4vY29tcG9uZW50cy9UYWJsZVwiO1xyXG5cclxuY29uc3QgdGFibGVFbGVtOiBIVE1MVGFibGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50YWJsZVwiKTtcclxuXHJcblxyXG5sZXQgdGFibGVDbGFzczogVGFibGUgPSBuZXcgVGFibGUodGFibGVFbGVtLCBbXHJcbiAgICB7bmFtZTogXCLQmNC80Y9cIiwgc29ydEtleTogXCJuYW1lXCJ9LFxyXG4gICAge25hbWU6IFwi0KDQvtGB0YJcIiwgc29ydEtleTogXCJoZWlnaHRcIn0sXHJcbiAgICB7bmFtZTogXCLQktC10YFcIiwgc29ydEtleTogXCJtYXNzXCJ9LFxyXG4gICAge25hbWU6IFwi0J/QvtC7XCIsIHNvcnRLZXk6IFwiZ2VuZGVyXCJ9LFxyXG5dLCBhcGlVcmwpO1xyXG5cclxudGFibGVDbGFzcy5zdGFydFJlbmRlcigpO1xyXG4iXX0=
